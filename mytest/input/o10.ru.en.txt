Federal State Budgetary Educational Institution
higher professional education
"Moscow State Technical University named after N. E. Bauman"
(MSTU. Bauman)



Faculty: Computer Science and Control Systems

Department: Theoretical Informatics and Computer Technologies







Laboratory work No. 5
"Development of a web-oriented client-server
applications. Parsing
HTML Pages and Request Forwarding "
at the rate: "COMPUTER NETWORKS"






Completed:
Student of group IU9-32B
Zhuk D.O.

Checked: 
Posevin D.P.


 
1. Purpose.
The goal of this lab is to develop a web-based client / server application using HTML parsing and request redirection in GO based on the golang.org/x/net/html package (main.go).
2. Problem conditions.
Implement a web-based client-server application for parsing hypertext infoblocks of news snippets on GO and run it on the server.
main.go
package main

import (
 "bytes"
 // "html / template"
 "log"
 "net / http"
 "strings"
 "text / template"

 "golang.org/x/net/html"
)

const site = "https://ria.ru/"
const feed = site + "football /"

type item struct {
 Text string
 Title string
 Href string
 ImgSrc string
 Links string
}

func isRequired (node ​​* html.Node, class string) bool {
 var names [] string
 for _, attr: = range node.Attr {
 if attr.Key == "class" {
 names = strings.Split (attr.Val, "")
 break
 }
 }
 for _, name: = range names {
 if name == class {
 return true
 }
 }
 return false
}

func getElementsByClass (node ​​* html.Node, class string) [] * html.Node {
 var elements [] * html.Node
 if isRequired (node, class) {
 elements = append (elements, node)
 }
for child: = node.FirstChild; child! = nil; child = child.NextSibling {
 elements = append (elements, getElementsByClass (child, class) ...)
 }
 return elements
}

func getElementsForMain (url string) [] item {
 resp, err: = http.Get (url)
 if err! = nil {
 log.Fatal ("Cannot get html:", err)
 }
 node, err: = html.Parse (resp.Body)
 if err! = nil {
 log.Fatal ("Cannot parse html:", err)
 }
 elements: = getElementsByClass (node, "list-item__content")

 var allElements [] item
 for _, elem: = range elements {
 var itm item
 itm.Href = "/ article? url =" + elem.FirstChild.Attr [0] .Val
 itm.ImgSrc = elem.FirstChild.FirstChild.FirstChild.Attr [2] .Val
 itm.Text = elem.LastChild.FirstChild.Data
 allElements = append (allElements, itm)
 }
 return allElements
}

func getElementForNews (url string) item {
 resp, err: = http.Get (url)
 if err! = nil {
 log.Fatal ("Cannot get html:", err)
 }
 node, err: = html.Parse (resp.Body)
 if err! = nil {
 log.Fatal ("Cannot parse html:", err)
 }
 var ans item
 element: = getElementsByClass (node, "layout-article__600-align") [0]
 ans.Title = getElementsByClass (element, "article__title") [0] .FirstChild.Data

 var buffer bytes.Buffer
 html.Render (& buffer, element)
 ans.Text = buffer.String ()

 return ans
}

func main () {
 tmpl, err: = template.ParseFiles ("index.html")
 if err! = nil {
 log.Fatal ("Unable to open html:", err.Error ())
 }
 tmpl2, err: = template.ParseFiles ("news.html")
 if err! = nil {
 log.Fatal ("Unable to open html:", err.Error ())
 }
 http.HandleFunc ("/", func (resp http.ResponseWriter, req * http.Request) {
 items: = getElementsForMain (feed)
 err = tmpl.Execute (resp, map [string] interface {} {
 "items": items,
 })
 if err! = nil {
 log.Fatal ("Unable to execute:", err.Error ())
 }
 })
 http.HandleFunc ("/ article", func (resp http.ResponseWriter, req * http.Request) {
 article: = req.URL.Query (). Get ("url")
 item: = getElementForNews (article)
 err = tmpl2.Execute (resp, map [string] interface {} {
 "title": item.Title,
 "text": item.Text,
 })
 if err! = nil {
 log.Fatal ("Unable to execute:", err.Error ())
 }
 })
 http.ListenAndServe (": 3012", nil)
}

index.html
<! DOCTYPE html>
<html>
<head>
 <meta charset = "utf-8">
 <style>
 .my_img {
 height: 10em;
 width: auto;
 }
 </style>
 <title> News Kod.ru </title>
</head>
<body>
<h1> News Kod.ru </h1>
<hr>
{{range .items}}
 <div>
 <a href=""" {.Href} }"> <h2> {{.Text}} </h2> </a>
 <img class = "my_img" src = "{{.ImgSrc}}" />
 <hr>
 </div>
{{end}}
</body>
</html>

news.html
<! DOCTYPE html>
<html>

<head>
 <meta charset = "utf-8">
 <style>
 .my_img {
 height: 30em;
 width: auto;
 }
 </style>
 <link rel = "canonical" href = "https://rsport.ria.ru/20201115/futbol-1584751877.html">
 <link rel = "alternate" hreflang = "ru" href = "https://rsport.ria.ru/20201115/futbol-1584751877.html">
 <link rel = "alternate" hreflang = "x-default" href = "https://rsport.ria.ru/20201115/futbol-1584751877.html">
 <link rel = "alternate" type = "application / rss + xml" href = "https://rsport.ria.ru/export/rss2/archive/index.xml">
 <meta name = "robots" content = "index, follow, max-image-preview: large">
 <meta property = "article: published_time" content = "20201115T2310">
 <meta property = "article: modified_time" content = "20201116T0032">
 <meta property = "article: author" content = "">
 <meta property = "article: section" content = "News">
 <meta property = "article: tag" content = "Kenan Karaman">
 <meta property = "article: tag" content = "Cengiz Under">
 <meta property = "article: tag" content = "Turkey">
 <meta property = "article: tag" content = "Stanislav Cherchesov">
 <meta property = "article: tag" content = "League of Nations">
 <meta property = "article: tag" content = "Football">
 <meta name = "relap-entity-id" content = "1584751877">
 <link rel = "amphtml" href = "https://rsport.ria.ru/amp/20201115/futbol-1584751877.html">
 <meta name = "viewport" content = "width = device-width, initial-scale = 1.0, maximum-scale = 1.0, user-scalable = yes">
 <meta name = "HandheldFriendly" content = "true">
 <meta name = "MobileOptimzied" content = "width">
 <meta name = "referrer" content = "always">
 <meta name = "format-detection" content = "telephone = no">
 <meta name = "format-detection" content = "address = no">
 <meta xmlns: fb = "http://www.facebook.com/2008/fbml" property = "fb: app_id" content = "249200938462429">
 <meta name = "google-site-verification" content = "tDPL_D0c1U8fXX8-dUheZl6fJwumElMpekQ3313FoDA">
 <meta name = "yandex-verification" content = "42a2d401d9bc8c79">
 <meta name = "yandex-verification" content = "bcf15071bce56501">
 <link rel = "apple-touch-icon" sizes = "57x57"
 href = "https://cdn22.img.ria.ru/i/favicons/rsport/apple-touch-icon-57x57.png">
 <link rel = "apple-touch-icon" sizes = "60x60"
 href = "https://cdn21.img.ria.ru/i/favicons/rsport/apple-touch-icon-60x60.png">
 <link rel = "apple-touch-icon" sizes = "72x72"
 href = "https://cdn21.img.ria.ru/i/favicons/rsport/apple-touch-icon-72x72.png">
 <link rel = "apple-touch-icon" sizes = "76x76"
 href = "https://cdn21.img.ria.ru/i/favicons/rsport/apple-touch-icon-76x76.png">
 <link rel = "apple-touch-icon" sizes = "114x114"
 href = "https://cdn21.img.ria.ru/i/favicons/rsport/apple-touch-icon-114x114.png">
 <link rel = "apple-touch-icon" sizes = "120x120"
 href = "https://cdn21.img.ria.ru/i/favicons/rsport/apple-touch-icon-120x120.png">
 <link rel = "apple-touch-icon" sizes = "144x144"
 href = "https://cdn21.img.ria.ru/i/favicons/rsport/apple-touch-icon-144x144.png">
 <link rel = "apple-touch-icon" sizes = "152x152"
 href = "https://cdn21.img.ria.ru/i/favicons/rsport/apple-touch-icon-152x152.png">
 <link rel = "apple-touch-icon" sizes = "180x180"
 href = "https://cdn21.img.ria.ru/i/favicons/rsport/apple-touch-icon-180x180.png">
 <link rel = "icon" type = "image / png" href = "https://cdn21.img.ria.ru/i/favicons/rsport/favicon-32x32.png" sizes = "32x32">
 <link rel = "icon" type = "image / png" href = "https://cdn21.img.ria.ru/i/favicons/rsport/favicon-194x194.png"
 sizes = "194x194">
 <link rel = "icon" type = "image / png" href = "https://cdn21.img.ria.ru/i/favicons/rsport/favicon-96x96.png" sizes = "96x96">
 <link rel = "icon" type = "image / png" href = "https://cdn21.img.ria.ru/i/favicons/rsport/android-chrome-192x192.png"
 sizes = "192x192">
 <link rel = "icon" type = "image / png" href = "https://cdn21.img.ria.ru/i/favicons/rsport/favicon-16x16.png" sizes = "16x16">
 <link rel = "manifest" href = "https://cdn21.img.ria.ru/i/favicons/rsport/manifest.json">
 <link rel = "shortcut icon" href = "https://cdn21.img.ria.ru/i/favicons/rsport/favicon.ico">
 <link rel = "preload" href = "https://cdn21.img.ria.ru/css/fonts/font_montserrat.css?9a3308e53" as = "style"
 onload = "this.onload = null; this.rel = 'stylesheet'">
 <link rel = "preload" href = "https://cdn22.img.ria.ru/css/fonts/font_noto_sans.css?9ac32d8e2" as = "style"
 onload = "this.onload = null; this.rel = 'stylesheet'"> <noscript>
 <link rel = "stylesheet" type = "text / css" href = "https://cdn21.img.ria.ru/css/fonts/font_montserrat.css?9a3308e53">
 <link rel = "stylesheet" type = "text / css" href = "https://cdn22.img.ria.ru/css/fonts/font_noto_sans.css?9ac32d8e2">
 </noscript>
 <link rel = "stylesheet" type = "text / css" href = "https://cdn21.img.ria.ru/css/common.min.css?912f3bcc36">
 <link rel = "stylesheet" type = "text / css" href = "https://cdn21.img.ria.ru/css/pages/rsport.min.css?99eb37db2">
 <link rel = "stylesheet" type = "text / css" href = "https://cdn21.img.ria.ru/css/pages/article.min.css?953a915da">
 <link rel = "stylesheet" type = "text / css" href = "https://cdn21.img.ria.ru/css/print/common_print.min.css?98ce81c63">
 <title> {{.title}} </title>
</head>

<body>
 {{.text}}
</body>

</html>

 


3. Execution results
 
4. Server
Path to files with lab work on lab2.posevin.com server:
 / home / zhuk / semestr3 / lab5
After starting main.go, the site will be located at:
 http://lab2.posevin.com:3012/
