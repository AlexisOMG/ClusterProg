Федеральное государственное бюджетное образовательное учреждение
высшего профессионального образования
«Московский государственный технический университет имени Н. Э. Баумана»
(МГТУ им. Н. Э. Баумана)



Факультет: Информатика и системы управления

Кафедра: Теоретическая информатика и компьютерные технологии







Лабораторная работа №0
«Разработка web-ориентированного клиент-серверного
приложения получения и представления данных
из RSS-канала»
по курсу: «КОМПЬЮТЕРНЫЕ СЕТИ»






Выполнил:
Студент группы ИУ9-32Б
Жук Д. О.

Проверил: 
Посевин Д. П.


 
1.	Цель.
Целью данной лабораторной работы является: разработка web-сервера на языке GO на основе пакета net/http (main1.go), разработка приложения на языке GO реализующего синтаксический разбор XML файла формата RSS (main2.go) и интеграция результатов работ (main3.go).
2.	Условия задачи.
Реализовать на языке GO web-сервер, который выполняет соединение с удаленным (удаленными) серверами RSS-новостей и возвращает результаты обработки данных в структурированном виде (страница гипертекста) web-клиенту, в нашем случае в браузер по вариантам.
3.	Решение.
main1.go
package main

import (
   "log"
   "net/http"
)

func HandlerMain(w http.ResponseWriter, r *http.Request) {
   w.Write([]byte(
      `<html>
                        <head>
                <title>Лабораторная №0.1 | Меню</title>
                                <meta charset="utf-8">
                </head>
                <body>
                                <h2>Меню</h2>
                                <p><a href="/lenta">Lenta.ru</a></p>
                                <p><a href="/mail">Новости Mail.Ru</a></p>
                                <p><a href="/vs">ВЗГЛЯД.РУ</a></p>
                </body>
        </html>`,
   ))
}

func HandlerLenta(w http.ResponseWriter, r *http.Request) {
   w.Write([]byte(
      `<html>
                        <head>
                <title>Лабораторная №0.1 | Lenta.ru</title>
                                <meta charset="utf-8">
                </head>
                <body>
                                <h2>Lenta.ru</h2>
                                <p>...</p>
                </body>
        </html>`,
   ))
}

func HandlerMail(w http.ResponseWriter, r *http.Request) {
   w.Write([]byte(
      `<html>
                        <head>
                <title>Лабораторная №0.1 | Новости Mail.Ru</title>
                                <meta charset="utf-8">
                </head>
                <body>
                                <h2>Новости Mail.Ru</h2>
                                <p>...</p>
                </body>
        </html>`,
   ))
}

func HandlerVs(w http.ResponseWriter, r *http.Request) {
   w.Write([]byte(
      `<html>
                        <head>
                <title>Лабораторная №0.1 | ВЗГЛЯД.РУ</title>
                                <meta charset="utf-8">
                </head>
                <body>
                                <h2>ВЗГЛЯД.РУ</h2>
                                <p>...</p>
                </body>
        </html>`,
   ))
}

func main() {
   http.HandleFunc("/", HandlerMain)
   http.HandleFunc("/lenta", HandlerLenta)
   http.HandleFunc("/mail", HandlerMail)
   http.HandleFunc("/vs", HandlerVs)
   err := http.ListenAndServe(":3012", nil)
   if err != nil {
      log.Fatal("ListenAndServe: ", err)
   }
}

main2.go

package main

import (
   "fmt"
   "log"

   "github.com/mmcdole/gofeed"
)

func main() {
   urls := []string{
      "https://lenta.ru/rss",
      "https://news.mail.ru/rss/90/",
      "https://vz.ru/rss.xml",
   }
   for _, url := range urls {
      parser := gofeed.NewParser()
      f, err := parser.ParseURL(url)
      if err != nil {
         log.Fatalln("Could not read feed")
      }
      for _, i := range f.Items {
         fmt.Println(i.Title)
         fmt.Println(i.Description)
      }
   }
}
 
main3.go

package main

import (
   "fmt"
   "log"
   "net/http"
   "sort"

   "github.com/mmcdole/gofeed"
)

type Website struct {
   ShortName string
   URL string
}

var allWebsites = []Website {
   {"/lenta", "https://lenta.ru/rss"},
   {"/mail", "https://news.mail.ru/rss/90/"},
   {"/vs", "https://vz.ru/rss.xml"},
}

func HandlerMain(w http.ResponseWriter, r *http.Request) {
   menu := ""
   var arr []*gofeed.Item
   for _, x := range allWebsites {
      parser := gofeed.NewParser()
      f, err := parser.ParseURL(x.URL)
      if err == nil {
         arr = append(arr, f.Items...)
         menu += "<p><a href=\"" + x.ShortName + "\">" + f.Title + "</a></p>"
      }
   }
   sort.Slice(arr, func(i, j int) bool {
      return arr[j].PublishedParsed.Before(*arr[i].PublishedParsed)
   })
   list := ""
   for _, x := range arr {
      list += "\n\t\t\t\t<h2>" + x.Title + "</h2>\n"
      list += "\t\t\t\t<p><a href=\"" + x.Link + "\">" + x.Published + "</a></p>"
      list += "\t\t\t\t<p>" + x.Description + "</p><hr>\n"
   }
   w.Write([]byte(fmt.Sprintf(`
      <html>
         <head>
               <title>Лабораторная №0 | Меню</title>
            <meta charset="utf-8">
           </head>
           <body>
            <h1>Меню</h1>
            %s%s
            <p>Сделал студент ИУ9-32Б Жук Дмитрий</p>
           </body>
       </html>`, menu, list)))
}

func handleFeed(url string) func(http.ResponseWriter, *http.Request) {
   return func(w http.ResponseWriter, r *http.Request) {
      s, err := fetchRss(url)
      if err != nil {
         s = "Cannot fetch feed"
      }
      w.Write([]byte(s))
   }
}

func fetchRss(url string) (string, error) {
   parser := gofeed.NewParser()
   f, err := parser.ParseURL(url)
   if err != nil {
      return "", err
   }
   res := "<h1>" + f.Title + "</h1>"
   for _, x := range f.Items {
      res += "\n\t\t\t\t<h2>" + x.Title + "</h2>\n"
      res += "\t\t\t\t<p>" + x.Description + "</p><hr>\n"
   }
   return fmt.Sprintf(`
        <html>
         <head>
            <title>%s</title>
            <meta charset="utf-8">
            <style>
            h2 {
               margin-bottom: 0em;
            }
            p {
               margin-top: 0.5em;
               margin-bottom: 0.5em;
            }
            </style>
         </head>
         <body>%s
            <p>Сделал студент ИУ9-32Б Жук Дмитрий</p>
         </body>
        </html>`, "Лабораторная №0 | " + f.Title, res), nil
}

func main() {
   http.HandleFunc("/", HandlerMain)
   for _, x := range allWebsites {
      http.HandleFunc(x.ShortName, handleFeed(x.URL))
   }
   err := http.ListenAndServe(":3012", nil)
   if err != nil {
      log.Fatal("ListenAndServe: ", err)
   }
}
Для парсинга RSS использовалась библиотека gofeed. Приложение имеет главную страницу, на которой объединены посты из нескольких RSS-каналов, отсортированных в порядке убывания даты публикации. Вверху страницы находятся ссылки на страницы каналов, на которых можно посмотреть посты конкретного канала. 

4.	Результаты выполнения
 
5.	Сервер
Путь к файлам программ на сервере lab2.posevin.com:
			/home/zhuk/semestr3/lab0
